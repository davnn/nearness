[build-system]
requires = ["uv-build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "nearness"
module-root = "src"

[project]
name = "nearness"
version = "0.2.5"
description = "An easy-to-use interface for (approximate) nearest neighbors algorithms."
readme = "README.md"
homepage = "https://github.com/davnn/nearness"
repository = "https://github.com/davnn/nearness"
authors = [{ name = "David Muhr", email = "muhrdavid+github@gmail.com" }]
license = { text = "MIT" }
requires-python = ">=3.10,<3.13"
keywords = ["nearest neighbors", "approximation", "similarity search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Typing :: Typed"
]
dependencies = [
    "safecheck>=0.3",
    "joblib>=1",
    "typing-extensions>=4"
]

[project.optional-dependencies]
annoy = ["annoy>=1"]
numpy = ["numpy>=1"]
scipy = ["scipy>=1"]
hnswlib = ["hnswlib>=0.8"]
scikit-learn = ["scikit-learn>=1"]
autofaiss = ["autofaiss>=2.17", "faiss-cpu>=1"]
faiss = ["faiss-cpu>=1"]
torch = ["torch>=1"]
scann = ["scann>=1; sys_platform == 'linux'"]
jax = ["jax[cpu]>=0.4"]
usearch = ["usearch>=2"]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.9.0",
    "coverage>=7.11.0",
    "genbadge>=1.1.2",
    "hypothesis>=6.142.4",
    "notebook>=7.4.7",
    "pre-commit>=4.3.0",
    "pyright[nodejs]>=1.1.407",
    "pytest>=8.4.2",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=7.0.0",
    "pytest-html>=4.1.1",
    "ruff>=0.14.2",
]

[tool.uv.sources]
torch = [{ index = "pytorch-cpu" }]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.black]
target-version = ["py310"]
line-length = 120
color = true

[tool.ruff]
target-version = "py310"
line-length = 120
lint.select = ["ALL"]
lint.ignore = [
    "D203", "D213", "D401", "E501", "F403", "B008", "S101", "PLR0911", "D107",
    "TCH", "PLR0913", "F722", "UP037", "F821", "UP035", "ARG002", "PLR2004", "PYI041",
    "E731", "B905", "ANN401", "PGH003"
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"beartype".msg = "Do not import from beartype, import from safecheck instead."
"jaxtyping".msg = "Do not import from jaxtype, import from safecheck instead."
"typing".msg = "Do not import from typing, import from typing_extensions instead."

[tool.pyright]
include = ["src/nearness"]
reportPrivateImportUsage = true
reportConstantRedefinition = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportOptionalMemberAccess = false
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = "warning"
reportInconsistentConstructor = true
reportInvalidStubStatement = "warning"
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = false
reportOverlappingOverload = false
reportPrivateUsage = false
reportTypeCommentUsage = "warning"
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = true
reportUnusedVariable = true
reportUnusedExpression = true
reportUnusedCallResult = false
reportUntypedBaseClass = false
reportUntypedClassDecorator = false
reportUntypedFunctionDecorator = false
reportUntypedNamedTuple = false
reportCallInDefaultInitializer = false
reportImplicitStringConcatenation = true
reportMissingSuperCall = true
reportPropertyTypeMismatch = true
reportUninitializedInstanceVariable = true
reportMissingImports = false

[tool.pytest.ini_options]
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
addopts = ["--strict-markers", "--tb=short", "--cov-report=html", "--cov-report=xml"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::nearness.ExperimentalWarning"
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "@overload",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
